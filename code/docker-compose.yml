services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: pax-mysql
    environment:
      MYSQL_DATABASE: underwriting
      MYSQL_USER: pax_user
      MYSQL_PASSWORD: pax_password
      MYSQL_ROOT_PASSWORD: root_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - pax-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "pax_user", "-ppax_password"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Java Spring Boot Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: pax-backend
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/underwriting
      SPRING_DATASOURCE_USERNAME: pax_user
      SPRING_DATASOURCE_PASSWORD: pax_password
      AI_SERVICE_URL: http://backend-ai:8001
    depends_on:
      mysql:
        condition: service_healthy
    networks:
      - pax-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Python FastAPI AI Backend
  backend-ai:
    build:
      context: ./backend_ai
      dockerfile: Dockerfile
    container_name: pax-backend-ai
    ports:
      - "8001:8001"
    environment:
      PORT: 8001
      HOST: 0.0.0.0
      LOG_LEVEL: info
    volumes:
      - ai_models:/app/models
    networks:
      - pax-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8001/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  # Python FastAPI Algorithm Backend
  backend-algo:
    build:
      context: ./backend_algo
      dockerfile: Dockerfile
    container_name: pax-backend-algo
    ports:
      - "8002:8002"
    environment:
      PORT: 8002
      HOST: 0.0.0.0
      LOG_LEVEL: info
    volumes:
      - algo_models:/app/models
    networks:
      - pax-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8002/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: pax-frontend
    ports:
      - "3000:80"
    depends_on:
      - backend
      - backend-ai
      - backend-algo
    networks:
      - pax-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  pax-network:
    driver: bridge

volumes:
  mysql_data:
    driver: local
  ai_models:
    driver: local
  algo_models:
    driver: local
